= How to use different DataProviders? =

When developing locally, it's preferred to create a local configuration file that can be quickly modified in order to change the values while developing. In such a situation, OpenConfig allows for switching the DataProvider. Out of the box, OpenConfig supports the following DataProviders:

   * XmlDataProvider
   * PropertiesDataProvider

Depending on the preference of the developer, either of these DataProviders can be used or a custom DataProvider written. In the following section, we're going to examine how to swap out different DataProviders.

== How to swap out DataProviders? ==

All customization of OpenConfig is done by modifying the open-config.properties file. This file is a simple key/value file that defines the relationship between the pluggable 'component' with the implementation. The pluggable component that needs to be replace when working with DataProviders is the DataProvider component. The below example shows how to enable the usage of the XmlDataProvider packaged with OpenConfig.

{{{
DataProvider=org.openconfig.providers.XmlDataProvider
}}}

For detail information about the open-config.properties file, please see [http://code.google.com/p/open-config open-config.properties].
 
== How to use the XmlDataProvider ==

When working with hierarchical data structures, it's preferred to use the XmlDataProvider over the PropertiesDataProvider for obvious reasons. The configuration file passed to the XmlDataProvider doesn't have any DTD or Scheme. Each node within the file maps to an object on the configuration interface. Let's example a simple configuration file.

ConfiguratorInterface.xml

{{{
<?xml version='1.0'?>
<configuration>
   <person id="100" name="Richard Burton">
       <friend id="101" name="Dushyanth Inguva"/>
   </person>
</configuration>
}}}

The domain model for the above configuration looks as follows:

{{{
public class Person {
   private int id;
   private String name;
   private Person friend;
   // Define the getter methods..
}
}}}

ConfiguratorInterface.java

{{{
public interface ConfiguratorInterface {
   Person getPerson();
}
}}}

Usage example:

{{{
ConfiguratoryFactory cf = new ConfiguratorFactoryBuilder().build();
ConfiguratorInterface ci = cf.newInstance(ConfiguratorInterface.class);
Person person = ci.getPerson();
System.out.println("The person id is " + person.getId());
System.out.println("The person name is " + person.getName());
}}}